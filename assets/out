#!/bin/bash

set -e -u -o pipefail -o errtrace

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

export root=$(dirname "${0}" | while read a; do cd "${a}" && pwd && break; done)
# shellcheck source=./common.sh
source "${root}/common.sh"

source="${1:-}"

if [ -z "${source}" ]; then
  echo "usage: ${0} <path/to/source>"
  exit 1
fi

cd "${source}"

payload=$(mktemp "${TMPDIR}/sonarqube-resource-out.XXXXXX")
cat > "${payload}" <&0

# source
bitbucket_type=$(jq -r '.source.bitbucket_type // "server"' < "${payload}")
base_url=$(jq -r '.source.base_url // ""' < "${payload}")
username=$(jq -r '.source.username // ""' < "${payload}")
password=$(jq -r '.source.password // ""' < "${payload}")
project=$(jq -r '.source.project // ""' < "${payload}")
repository=$(jq -r '.source.repository // ""' < "${payload}")

# params
build=$(jq '.params' < "${payload}")
dir=$(jq -r '.params.dir // ""' < "${payload}")
if [ -z "${dir:-}" ] || [ ! -d "${dir}" ] ; then
    echo "error: params.dir must be set and must point to the directory that conains the sources of the PR."
    exit 1
fi
cd "${dir}"


if [ -z "${base_url:-}" ]; then
    echo "error: source.base_url can't be empty"
    exit 1
fi

if [ ! -f "./pull-request-info" ]; then
    echo "error: pull-request-info not found."
    exit 1
fi
pr=$(cat "./pull-request-info")

commit=$(echo "${pr}" | jq -r '.commit')
build_url="${ATC_EXTERNAL_URL}/builds/${BUILD_ID}"
if [ "${bitbucket_type}" == "server" ]; then
    url="${base_url}/rest/build-status/1.0/commits/${commit}"

    json=$(echo "${build}" | jq --arg build_url "${build_url}" --arg id "${BUILD_ID}" --arg build_job_name "${BUILD_JOB_NAME}" '{
        state: .state,
        key: $build_job_name,
        name: .name,
        url: $build_url,
        description: ("Concourse CI build, hijack as #" + $id)
    }')
elif [ "${bitbucket_type}" == "cloud" ]; then
    url="${base_url}/api/2.0/repositories/${project}/${repository}/commit/${commit}/statuses/build"


    # expand variables like $BUILD_ID before passing into JSON
    name=$(echo "${build}"| jq -r '.name')
    name=$(eval echo ${name})
    desc=$(echo "${build}"| jq -r '.description')
    desc=$(eval echo ${desc})
    build_url=$(echo "${build}"| jq -r '.url')
    build_url=$(eval echo $build_url)
    json=$(echo "${build}" | jq --arg build_url "${build_url}" --arg id "${BUILD_ID}" --arg name "${name}" --arg desc "${desc}" '{
        state: .state,
        key: ($name + "-" + $id),
        name: $name,
        url: $build_url,
        description: $desc
    }')
fi

curl -s --fail -u "${username}:${password}" -H "Content-Type: application/json" -XPOST "${url}" -d "${json}"

jq -n --argjson pr "${pr}" --argjson pr "${pr}" '{
    version: {
        id: $pr.id|tostring,
        branch: $pr.feature_branch,
        commit: $pr.commit
    }
}' >&3
